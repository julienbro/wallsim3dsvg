/**
 * Script de validation de l'int√©gration GLB Preview
 * V√©rifie que tous les composants sont correctement configur√©s
 */

const fs = require('fs');
const path = require('path');

function validateGLBPreviewIntegration() {
    console.log('üîç Validation de l\'integration GLB Preview...\n');
    
    const baseDir = process.cwd();
    let errors = [];
    let warnings = [];
    let successes = [];
    
    try {
        // 1. V√©rifier l'existence du fichier GLB
        const glbPath = path.join(baseDir, 'assets', 'models', 'planchers', 'hourdis_60_13.glb');
        try {
            const glbStats = fs.statSync(glbPath);
            successes.push(`‚úÖ Fichier GLB trouv√©: ${glbPath} (${Math.round(glbStats.size/1024)}KB)`);
        } catch (e) {
            errors.push(`‚ùå Fichier GLB manquant: ${glbPath}`);
        }
        
        // 2. V√©rifier ElementsLibrary.js
        const elementsLibraryPath = path.join(baseDir, 'js', 'managers', 'ElementsLibrary.js');
        try {
            const elementsLibraryContent = fs.readFileSync(elementsLibraryPath, 'utf8');
            
            // V√©rifier la d√©finition hourdis avec type GLB
            if (elementsLibraryContent.includes("'Hourdis 60+13'") && 
                elementsLibraryContent.includes("type: 'glb'") &&
                elementsLibraryContent.includes("path: 'planchers/hourdis_60_13.glb'")) {
                successes.push('‚úÖ ElementsLibrary: √âl√©ment hourdis correctement configur√© avec type GLB');
            } else if (elementsLibraryContent.includes("'Hourdis 60+13'")) {
                if (!elementsLibraryContent.includes("type: 'glb'")) {
                    errors.push('‚ùå ElementsLibrary: Propri√©t√© type: "glb" manquante pour hourdis');
                }
                if (!elementsLibraryContent.includes("path: 'planchers/hourdis_60_13.glb'")) {
                    errors.push('‚ùå ElementsLibrary: Chemin GLB incorrect pour hourdis');
                }
            } else {
                errors.push('‚ùå ElementsLibrary: √âl√©ment hourdis non trouv√©');
            }
            
        } catch (e) {
            errors.push(`‚ùå Impossible de lire ElementsLibrary.js: ${e.message}`);
        }
        
        // 3. V√©rifier UIManager.js
        const uiManagerPath = path.join(baseDir, 'js', 'managers', 'UIManager.js');
        try {
            const uiManagerContent = fs.readFileSync(uiManagerPath, 'utf8');
            
            // V√©rifier les composants GLB preview
            const checks = [
                { pattern: 'glbPreviews = new Map()', message: 'Initialisation glbPreviews Map' },
                { pattern: 'previewCanvas = new Map()', message: 'Initialisation previewCanvas Map' },
                { pattern: 'createGLBPreview(element, previewDiv)', message: 'M√©thode createGLBPreview' },
                { pattern: "element.type === 'glb' && element.path", message: 'D√©tection √©l√©ments GLB' },
                { pattern: 'await this.elementsLibrary.loadModel', message: 'Chargement mod√®le GLB' },
                { pattern: 'new THREE.WebGLRenderer', message: 'Renderer WebGL pour preview' },
                { pattern: 'requestAnimationFrame(animate)', message: 'Animation rotation GLB' }
            ];
            
            checks.forEach(check => {
                if (uiManagerContent.includes(check.pattern)) {
                    successes.push(`‚úÖ UIManager: ${check.message}`);
                } else {
                    errors.push(`‚ùå UIManager: ${check.message} manquant`);
                }
            });
            
        } catch (e) {
            errors.push(`‚ùå Impossible de lire UIManager.js: ${e.message}`);
        }
        
        // 4. V√©rifier les imports Three.js
        const indexPath = path.join(baseDir, 'index.html');
        try {
            const indexContent = fs.readFileSync(indexPath, 'utf8');
            
            if (indexContent.includes('three.module.js')) {
                successes.push('‚úÖ Import Three.js trouv√© dans index.html');
            } else {
                warnings.push('‚ö†Ô∏è Import Three.js non trouv√© dans index.html');
            }
            
            if (indexContent.includes('GLTFLoader.js')) {
                successes.push('‚úÖ Import GLTFLoader trouv√© dans index.html');
            } else {
                warnings.push('‚ö†Ô∏è Import GLTFLoader non trouv√© dans index.html');
            }
            
        } catch (e) {
            warnings.push(`‚ö†Ô∏è Impossible de v√©rifier index.html: ${e.message}`);
        }
        
        // 5. R√©sum√©
        console.log('\nüìä R√âSUM√â DE LA VALIDATION\n');
        
        if (successes.length > 0) {
            console.log('üéâ SUCC√àS:');
            successes.forEach(success => console.log(`   ${success}`));
            console.log('');
        }
        
        if (warnings.length > 0) {
            console.log('‚ö†Ô∏è  AVERTISSEMENTS:');
            warnings.forEach(warning => console.log(`   ${warning}`));
            console.log('');
        }
        
        if (errors.length > 0) {
            console.log('üö® ERREURS:');
            errors.forEach(error => console.log(`   ${error}`));
            console.log('');
        }
        
        // Conclusion
        if (errors.length === 0) {
            console.log('üéØ CONCLUSION: Int√©gration GLB Preview valid√©e avec succ√®s!');
            console.log('   ‚úÖ Le syst√®me de pr√©visualisation GLB devrait fonctionner correctement');
            console.log('   ‚úÖ Les √©l√©ments hourdis appara√Ætront avec des previews 3D WebGL');
            
            if (warnings.length > 0) {
                console.log('   ‚ö†Ô∏è  Quelques avertissements √† v√©rifier mais non bloquants');
            }
        } else {
            console.log('‚ùå CONCLUSION: Des erreurs doivent √™tre corrig√©es avant utilisation');
            console.log(`   üîß ${errors.length} erreur(s) √† corriger`);
        }
        
        console.log('\nüìã √âTAPES DE TEST RECOMMAND√âES:');
        console.log('   1. Ouvrir l\'application dans un navigateur');
        console.log('   2. Cliquer sur "Biblioth√®que d\'√©l√©ments" dans le panneau droit');
        console.log('   3. S√©lectionner l\'onglet "Planchers"');
        console.log('   4. V√©rifier que "Hourdis 60+13" affiche une preview 3D rotative');
        console.log('   5. Comparer avec les autres √©l√©ments qui utilisent des cubes CSS');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la validation:', error.message);
    }
}

// Ex√©cuter la validation
validateGLBPreviewIntegration();
